% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/processor.R
\name{processor}
\alias{processor}
\title{Process the pipeline}
\usage{
processor(
  pipeline,
  ncores = half_cores(),
  n_concurrent_files = 1L,
  progress = FALSE,
  ...
)
}
\arguments{
\item{pipeline}{a LASRpipeline. A serie of stages called in order}

\item{ncores, n_concurrent_files}{integer. Number of cores to use. See details.}

\item{progress}{boolean. Displays a progress bar.}

\item{...}{unused}
}
\description{
Process the pipeline. Every other functions do nothing. This function must be called on a pipeline
to actually process the point-cloud
}
\details{
There are 4 modes of parallelization:
\describe{
\item{"Sequential"}{No parallelization at all: \code{ncores = 1}, \code{n_concurrent_files = 1}}
\item{"Concurent points"}{Files are process sequentially one by one and inside the pipeline
some parts/stages are parallelized and are able to process multiple points simultaneously.
\code{ncores = n}, \code{n_concurrent_files = 1}}
\item{"Concurent files"}{Files are process in parallel. Several files are loaded in memory
and processed simultaneously. The entire pipeline is parallelized but inside each stage
the points are process sequentially. \code{ncores = 1}, \code{n_concurrent_files = n}}
\item{"Mixed"}{Files are process in parallel. Several files are loaded in memory
and processed simultaneously. The entire pipeline is parallelized and inside each stage
the points are process in parallel \code{ncores = n}, \code{n_concurrent_files = m}}
}
\code{Mixed} is reserved for experts. \verb{Concurent file} is likely the most desirable option
on modern laptop with fast drive and many cores. However it uses more memory because it
loads multiples files. Also some stages do not support this type a parallelism because
they call R code and R is not multi-threaded. For example a stage that implies \link{callback()}
does not support concurrent files multi-threading because some R code is involved.
}
\examples{
\dontrun{
f <- paste0(system.file(package="lasR"), "/extdata/bcts/")
f <- list.files(f, pattern = "(?i)\\\\.la(s|z)$", full.names = TRUE)

read <- reader(f, filter = "")
tri <- triangulate(15)
dtm <- rasterize(5, tri)
lmf <- local_maximum(5)
met <- rasterize(2, mean(Intensity))
pipeline <- read + tri + dtm + lmf + met
ans <- processor(pipeline)
}
}
