% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/processor.R
\name{set_exec_options}
\alias{set_exec_options}
\title{Set global processing options}
\usage{
set_exec_options(
  ncores = NULL,
  progress = NULL,
  buffer = NULL,
  chunk = NULL,
  ...
)
}
\arguments{
\item{ncores}{An object returned by one of \code{sequential()}, \code{concurrent_points()}, \code{concurrent_files}, or
\code{nested()}. See \link{multithreading}.}

\item{progress}{boolean. Displays a progress bar.}

\item{buffer}{numeric. Each file is read with a buffer. The default is NULL, which does not mean that
the file won't be buffered. It means that the internal routine knows if a buffer is needed and will
pick the greatest value between the internal suggestion and this value.}

\item{chunk}{numeric. By default, the collection of files is processed by file (\code{chunk = NULL} or \code{chunk = 0}).
It is possible to process in arbitrary-sized chunks. This is useful for e.g., processing collections
with large files or processing a massive \code{copc} files.}

\item{...}{Other internal options not exposed to users.}
}
\description{
Set global processing options for the \link{exec} function. By default, pipelines are executed
without a progress bar, processing one file at a time sequentially. The following options can be
passed to the \code{exec()} function in four ways. See details.
}
\details{
There are 4 ways to pass processing options, and it is important to understand the precedence rules:\cr\cr
The first option is by explicitly naming each option. This option is deprecated and used for convenience and
backward compatibility.
\preformatted{
exec(pipeline, on = f, progress = TRUE)
}
The second option is by passing a \code{list} to the \code{with} argument. This option is more explicit
and should be preferred. The \code{with} argument takes precedence over the explicit arguments.
\preformatted{
exec(pipeline, on = f, with = list(progress = TRUE, chunk = 500))
}
The third option is by using a \code{LAScatalog} from the \code{lidR} package. A \code{LAScatalog} already carries
some processing options that are respected by the \code{lasR} package. The options from a \code{LAScatalog}
take precedence.
\preformatted{
exec(pipeline, on = ctg)
}
The last option is by setting global processing options. This has global precedence and is mainly intended
to provide a way for users to override options if they do not have access to the \code{exec()} function.
This may happen when a developer creates a function that executes a pipeline internally, and users cannot
provide any options.
\preformatted{
set_exec_options(progress = TRUE, ncores = concurrent_files(2))
exec(pipeline, on = f)
}
By default lasR already set a global options for \code{ncores}. Thus providing \code{ncores} has no effect unless
you call \link{unset_parallel_strategy} first.
}
\seealso{
\link{multithreading}
}
