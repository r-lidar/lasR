% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stages.R
\name{local_maximum}
\alias{local_maximum}
\alias{local_maximum_raster}
\title{Local Maximum}
\usage{
local_maximum(
  ws,
  min_height = 2,
  filter = "",
  ofile = tempgpkg(),
  use_attribute = "Z",
  record_attributes = FALSE,
  store_in_attribute = ""
)

local_maximum_raster(
  raster,
  ws,
  min_height = 2,
  filter = "",
  ofile = tempgpkg()
)
}
\arguments{
\item{ws}{numeric. Diameter of the moving window used to detect the local maxima in the units of
the input data (usually meters).}

\item{min_height}{numeric. Minimum height of a local maximum. Threshold below which a point cannot be a
local maximum. Default is 2.}

\item{filter}{the 'filter' argument allows filtering of the point-cloud to work with points of
interest. For a given stage when a filter is applied, only the points that meet the criteria are processed.
The most common strings are \verb{Classification == 2"}, \code{"Z > 2"}, \code{"Intensity < 100"}. For more details see
\link{filters}.}

\item{ofile}{character. Full outputs are always stored on disk. If \code{ofile = ""}
then the stage will not store the result on disk and will return nothing. It will however
hold partial output results temporarily in memory. This is useful for stage that are only
intermediate stage.}

\item{use_attribute}{character. Specifies the attribute to use for the operation, with "Z" (the coordinate) as the default.
Alternatively, this can be the name of any other attribute, such as "Intensity", "gpstime", "ReturnNumber", or "HAG", if it exists.
Note: The function does not fail if the specified attribute does not exist in the point cloud.
For example, if "Intensity" is requested but not present, or "HAG" is specified but unavailable,
the internal engine will return 0 for the missing attribute.}

\item{record_attributes}{The coordinates XYZ of points corresponding to the local maxima are recorded.
It is also possible to record the attributes of theses points such as the intensity, return number, scan
angle and so on.}

\item{store_in_attribute}{In addition to producing a geospatial file with the local maxima,
the points can also be flagged: 0 if the point is not a local maximum, and 1 if the
point is a local maximum. If the attribute does not exist, it must first be created
with \link{add_extrabytes} (see examples).}

\item{raster}{LASRalgorithm. A stage that produces a raster.}
}
\value{
This stage produces a vector. The path provided to `ofile` is expected to be `.gpkg` or
any other format supported by GDAL. Vector stages may produce geometries with Z coordinates.
Thus, it is discouraged to store them in formats with no 3D support, such as shapefiles.
}
\description{
The Local Maximum stage identifies points that are locally maximum. The window size is
fixed and circular. This stage does not modify the point cloud. It produces a derived product
in vector format. The function \code{local_maximum_raster} applies on a raster instead of the point cloud
}
\examples{
f <- system.file("extdata", "MixedConifer.las", package = "lasR")
read <- reader()
lmf <- local_maximum(5)
ans <- exec(read + lmf, on = f)
ans

chm <- rasterize(1, "max")
lmf <- local_maximum_raster(chm, 5)
ans <- exec(read + chm + lmf, on = f)
# terra::plot(ans$rasterize)
# plot(ans$local_maximum, add = T, pch = 19)

# Storing LM in UserData.
lmf <- local_maximum(5, store_in_attribute = "UserData")
ans <- exec(read + lmf + write_las(), on = f)
ans

# Storing in an new attribute without geospatial output
attr <- add_extrabytes("uchar", "lm", "local maximum flag")
lmf <- local_maximum(5, ofile = "", store_in_attribute = "lm")
ans <- exec(attr + lmf + write_las(), on = f)
ans
}
